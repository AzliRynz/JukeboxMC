  final Long2ObjectMap<LoadingChunk> chunksCopy = new Long2ObjectOpenHashMap<>(this.chunks);
    final int currentHash = Arrays.hashCode(chunksCopy.keySet().toArray(new Long[0]));
    if(currentHash != this.lastHash) {
    this.lastHash = currentHash;
    
    this.world.getServer().getScheduler().executeAsync(() -> {
    int minX = 0, maxX = 0, minZ = 0, maxZ = 0;
    Long2ObjectMap<ChunkState> chunkStates = new Long2ObjectOpenHashMap<>();
  for(Long2ObjectMap.Entry<LoadingChunk> entry : chunksCopy.long2ObjectEntrySet()) {
    chunkStates.put( entry.getLongKey(), entry.getValue().chunk == null ? ChunkState.NEW : entry.getValue().chunk.getChunkState() );

    final int x = Utils.fromHashX(entry.getLongKey());
    final int z = Utils.fromHashZ(entry.getLongKey());
    
    if(x < minX) {
    minX = x;
  } else if(x > maxX) {
    maxX = x;
  }

    if(z < minZ) {
    minZ = z;
  } else if(z > maxZ) {
    maxZ = z;
  }
  }

    final int sizeX = Math.abs(maxX - minX) + 1;
    final int sizeZ = Math.abs(maxZ - minZ) + 1;
    
    try {
    final BufferedImage bufferedImage = new BufferedImage(sizeX, sizeZ, BufferedImage.TYPE_INT_ARGB);
    final Map<ChunkState, Integer> colors = new HashMap<>();
    colors.put(ChunkState.NEW, new Color(112, 112, 112).getRGB());
    colors.put(ChunkState.GENERATED, new Color(102, 255, 102).getRGB());
    colors.put(ChunkState.POPULATED, new Color(255, 255, 102).getRGB());
    colors.put(ChunkState.FINISHED, new Color(255, 51, 0).getRGB());
    
    for(int x = minX; x <= maxX; x++) {
    for(int z = minZ; z <= maxZ; z++) {
    final long chunkKey = Utils.toLong(x, z);
    final ChunkState state = chunkStates.get( chunkKey );
    if(state == null) continue;
    
    final int imageX = x - minX;
    final int imageZ = z - minZ;
    
    bufferedImage.setRGB(imageX, imageZ, colors.get(state));
    }
  }

    final File chunkImagesDir = new File("chunks");
    if(!chunkImagesDir.exists() && !chunkImagesDir.mkdirs()) return;
    
    ImageIO.write(bufferedImage, "PNG", new File(chunkImagesDir, System.currentTimeMillis() + ".png"));
  } catch(Throwable throwable) {
    throwable.printStackTrace();
  }
  });
  }